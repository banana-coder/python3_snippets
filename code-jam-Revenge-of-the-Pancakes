def get_inputs_from_file(file_name):
    read_file = open(file_name, "r")
    text = read_file.read()
    text_list = text.split("\n")
    read_file.close()
    return text_list


def write_output_file(text):
    write_file = open("pancakes_l.out", "w")
    write_file.write(text)
    write_file.close()
    return True


def value_reverse(input_values):
    out_str = ""
    for i in range(0, len(input_values)):
        if input_values[i] is "+":
            out_str += "-"
        if input_values[i] is "-":
            out_str += "+"
    return out_str


def swap_master(input_values, position):
    part_val = input_values[0: position + 1]
    print(position, input_values +" p: "+part_val)
    # print(type(part_val))
    part_val = value_reverse(part_val)
    # print("r: " + part_val)
    part_val = part_val[::-1]
    # print("R: " + part_val)
    part_val = part_val + input_values[position + 1:]
    # print("f: " + part_val+"\n")
    return part_val


def find_smart_position(input_values):
    location = len(input_values) - 1
    for i in range(1, len(input_values)):
        if input_values[i] != input_values[i-1]:
            location = i - 1
            break
    return location


def find_min_iter(input_val):
    if "-" not in input_val:
        return 0
    loc = find_smart_position(input_val)
    # print(loc)
    smart_counter = 0
    while loc >= 0:
        smart_counter += 1
        input_val = swap_master(input_val, loc)
        print(input_val)
        if "-" not in input_val:
            break
        loc = find_smart_position(input_val)
        print(smart_counter, "\nloc", loc, "\n")
    return smart_counter

file_values = get_inputs_from_file("B-large-practice.in")
# file_values = ["+", "++-++++----", "-"]

m_text = ''
for i in range(0, len(file_values)):
    m_text += "Case #" + str(i+1) + ": " + str(find_min_iter(file_values[i])) + "\n"
print(m_text)
write_output_file(m_text)
